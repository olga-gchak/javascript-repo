<!-- TASK 1-->
function propsCount(currentObject) {
    let props = Object.keys(currentObject).length;
    return props;
}

let mentor = { 
    course: "JS fundamental", 
    duration: 3,
    direction: "web-development" 
};

propsCount(mentor);  


<!--TASK 2-->
let student = {
    firstName: "Olga",
    lastName: "Ganushchak",
    years: 25,
    city: "Lviv",
    language: "JS"
}

function showProps(obj) {
    let props = Object.keys(obj);
    return props;
}

console.log(showProps(student));
console.log(Object.values(student));


<!--TASK 3-->
class Person {
    constructor(name, surname) {
        this.name = name;
        this.surname = surname;
    }
    showFullName() {
       return this.name + " " + this.surname;
    }
}

class Student extends Person {
    constructor(name, surname, year) {
        super(name, surname);
        this.year = year;
    }
    showFullName(midleName) {
        return this.name + " " + this.surname + " " + midleName;
    }
    showCourse() {
        let today = new Date();
        let fullYear = today.getFullYear();
        return fullYear - this.year;
    }
}

let stud1 = new Student("Petro", "Petrenko", 2015);
console.log(stud1.showFullName("Petrovych")); 
console.log("Current course: " + stud1.showCourse()); 


<!--TASK 4-->
class Worker {
    #_experience;
    constructor(fullName, dayRate, workingDays) {
        this.fullName = fullName;
        this.dayRate = dayRate;
        this.workingDays = workingDays;
        this._experience = 1.2;
    }
    showSalary() {
        return this.dayRate * this.workingDays;
    }
    showSalaryWithExperience() {
        return this.showSalary() * this._experience;
    }
    
    get experience() {
        return this._experience;
    }
    
    set experience(val) {
        if(isNaN(val)) {
            throw new Error(val + " is not a number");
        } else {
            this._experience = val;
        }
    }
}

let worker1 = new Worker("John Johnson", 20, 23);
console.log(worker1.fullName); 
console.log(worker1.fullName + " salary: " + worker1.showSalary());
console.log("New experience: " + worker1.experience);
console.log(worker1.fullName + " experience salary: " + worker1.showSalaryWithExperience());
worker1.experience = 1.5;
console.log("New experience: " + worker1.experience);
console.log(worker1.fullName + " experience salary: " + worker1.showSalaryWithExperience());


let worker2 = new Worker("Tom Tomson", 48, 22);
console.log(worker2.fullName); 
console.log(worker2.fullName + " salary: " + worker2.showSalary());
console.log("New experience: " + worker2.experience);
console.log(worker2.fullName + " experience salary: " + worker2.showSalaryWithExperience());
worker2.experience = 1.5;
console.log("New experience: " + worker2.experience);
console.log(worker2.fullName + " experience salary: " + worker2.showSalaryWithExperience());

let worker3 = new Worker("Andy Ander", 29, 23);
console.log(worker3.fullName); 
console.log(worker3.fullName + " salary: " + worker3.showSalary());
console.log("New experience: " + worker3.experience);
console.log(worker3.fullName + " experience salary: " + worker3.showSalaryWithExperience());
worker3.experience = 1.5;
console.log("New experience: " + worker3.experience);
console.log(worker3.fullName + " experience salary: " + worker3.showSalaryWithExperience());

let arr = [{name:worker1.fullName, salary:worker1.showSalaryWithExperience()}, {name:worker2.fullName, salary:worker2.showSalaryWithExperience()}, {name:worker3.fullName, salary:worker3.showSalaryWithExperience()}];
arr.sort(function (a, b) {
  return a.salary - b.salary;
});


<!--TASK 5-->
class GeometricFigure {
    getArea() {
      return 0;
    }
    toString() {
      return Object.getPrototypeOf(this).constructor.name;
    }
  }

  class Triangle extends GeometricFigure {
    constructor(side, height) {
      super();
      this.side = side;
      this.height = height;
    }
    getArea() {
      return 1 / 2 * (this.side * this.height);
    }
  }

  class Square extends GeometricFigure {
    constructor(side) {
      super();
      this.side = side;
    }
    getArea() {
      return this.side ** 2;
    }
  }

  class Circle extends GeometricFigure {
    constructor(radius) {
      super();
      this.radius = radius;
    }
    getArea() {
      return Math.PI * (this.radius ** 2);
    }
  }

  function handleFigures(figures) {
      let totalArea = 0;
    for (i = 0; i < figures.length; i++) {
        let figure = figures[i];
      if (figure instanceof GeometricFigure) {
        console.log("Geometric figure: " + figure.toString() + " - " + figure.getArea());
        totalArea += figure.getArea();
      } else {
        console.log("This class is not inherited from the class GeometricFigure")
      }
    }
     console.log(totalArea);
  }

const figures = [new Triangle(4, 5), new Square(7), new Circle(5)];
console.log(handleFigures(figures));
